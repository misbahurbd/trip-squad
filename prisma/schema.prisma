generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(uuid())
  username       String        @unique
  email          String        @unique
  emailVerified  DateTime?
  hashedPassword String
  role           UserRole      @default(User)
  status         UserStatus    @default(Active)
  isDeleted      Boolean       @default(false)
  profile        Profile?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  trip           Trip[]
  travelBuddy    TravelBuddy[]

  @@map("user")
}

model Profile {
  id           String    @id @default(uuid())
  name         String
  email        String    @unique
  mobile       String?   @unique
  profilePhoto String?
  dateOfBirth  DateTime?
  bio          String?
  userId       String    @unique
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("profile")
}

model VerificationToken {
  email     String
  token     String    @unique
  tokenType TokenType
  expiresAt DateTime

  @@id([email, token])
  @@map("verification_token")
}

model Trip {
  id          String        @id @default(uuid())
  destination String
  description String
  startDate   DateTime
  endDate     DateTime
  tripType    String
  photos      String[]
  itinerary   String
  location    String
  budget      Int
  tripStatus  TripStatus    @default(Open)
  isDeleted   Boolean       @default(false)
  creatorId   String
  createdBy   User          @relation(fields: [creatorId], references: [id])
  travelBuddy TravelBuddy[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([description, startDate, endDate])
  @@map("trip")
}

model TravelBuddy {
  id     String            @id @default(uuid())
  status TravelBuddyStatus @default(Pending)
  tripId String
  trip   Trip              @relation(fields: [tripId], references: [id])
  userId String
  user   User              @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, tripId])
  @@map("travel-buddy")
}

enum UserRole {
  SuperAdmin
  Admin
  User
}

enum UserStatus {
  Active
  Blocked
}

enum TokenType {
  Verify
  Reset
}

enum TripStatus {
  Open
  Closed
}

enum TravelBuddyStatus {
  Pending
  Approved
  Rejected
}
